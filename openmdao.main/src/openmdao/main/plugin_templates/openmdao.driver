__all__ = ['%(classname)s']

from openmdao.lib.datatypes.api import Float
from openmdao.main.api import Driver
from openmdao.main.hasparameters import HasParameters
from openmdao.util.decorators import add_delegate

# Make sure that your class has some kind of docstring. Otherwise
# the descriptions for your variables won't show up in the
# source documentation.

#@add_delegate(HasParameters)  # uncomment this to add parameter handling
class %(classname)s(Driver):
    """
    """
    
    # uncomment this to add parameter handling
    #implements(IHasParameters)

    # declare inputs and outputs here, for example:
    #x = Float(0.0, iotype='in', desc='description for x')
    #y = Float(0.0, iotype='out', desc='description for y')
    
    def start_iteration(self):
        super(%(classname)s, self).start_iteration()

    def continue_iteration(self):
        return super(%(classname)s, self).continue_iteration()
    
    def pre_iteration(self):
        super(%(classname)s, self).pre_iteration()
        
    def run_iteration(self):
        super(%(classname)s, self).run_iteration()

    def post_iteration(self):
        super(%(classname)s, self).post_iteration()
